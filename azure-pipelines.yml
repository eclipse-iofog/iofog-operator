trigger:
  tags:
    include:
    - v*
  branches:
    include:
    - develop
  paths:
    exclude:
    - README.md
    - CHANGELOG.md
    - LICENSE

pr:
  autoCancel: true
  branches:
    include:
      - master
      - develop
      - release*
  paths:
    exclude:
      - README.md
      - CHANGELOG.md
      - LICENSE

variables:
  jobuuid: $(Build.BuildId)$(Agent.Id)
  GOROOT: '/usr/local/go1.17.9'
  GOPATH: '/tmp/go'
  GOBIN:  '$(GOPATH)/bin'
  repository: 'focal-freedom-236620/operator'
  build: $(Build.BuildId)
  ref: $(Build.SourceBranch)
  branch: $(Build.SourceBranchName)
  version:

jobs:
- job: Operator
  pool:
    vmImage: 'Ubuntu-18.04'

  steps:
  - script: |
      set -e
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
    displayName: 'Set up the Go workspace'

  - task: GoTool@0
    inputs:
      version: '1.17.9'
      goPath: $(GOPATH)
      goBin: $(GOBIN)
    displayName: 'Install Golang'

  - bash: |
      VERS=$(echo $(commit) | cut -c1-20)
      if [[ $(ref) == refs/tags* ]]; then
        VERS=$(echo $(ref) | sed "s|refs/tags/v||g")
      fi
      echo "##vso[task.setvariable variable=version]$VERS"
    displayName: 'Set version variable'

  - script: |
      set -e
      make lint
    displayName: 'Lint source'

  - task: Docker@2
    displayName: 'build and push docker image'
    inputs:
      containerRegistry: 'Edgeworx GCP'
      repository: $(repository)
      command: 'buildAndPush'
      Dockerfile: './Dockerfile'
      buildContext: './'
      tags: |
        $(version)
        $(branch)
        $(branch)-$(build)
        latest

  - script: |
      set -e
      sudo make kubectl
    displayName: 'Install kubectl'

  - script: |
      set -e
      sudo make bats
    displayName: 'Install bats'

  - script: |
      set -e
      sudo make kustomize
    displayName: 'Install kustomize'

  - task: DownloadSecureFile@1
    displayName: 'Download secure file'
    inputs:
      secureFile: 'azure-gcp.json'

  - bash: |
      set -e
      keyFilePath="$(Agent.TempDirectory)/azure-gcp.json"
      if [[ -z $(which gcloud) ]]; then
        CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
        echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
        sudo apt-get update && sudo apt-get install -y google-cloud-sdk
      fi
      gcloud --quiet auth activate-service-account --key-file="${keyFilePath}"
      gcloud --quiet config set project $(gcp.project.name)
      gcloud --quiet container clusters get-credentials $(gcp.cluster.name) --region $(gcp.cluster.region)
    displayName: 'Connect to cluster'

  - script: |
      set -e
      IMAGE="gcr.io/focal-freedom-236620/operator:$(version)"
      cd config/operator
      kustomize edit set image "$IMAGE"
      kustomize build . > /tmp/deployment.yaml
      cp /tmp/deployment.yaml ./deployment.yaml
      cat ./deployment.yaml | grep "image: $IMAGE"
    displayName: 'Kustomize'

  - script: |
      set -e
      cp test/conf/env.sh.tpl test/conf/env.sh
      sed -i "s/<<NAMESPACE>>/$(jobuuid)/g" test/conf/env.sh
      sed -i "s/<<OP_VERSION>>/$(version)/g" test/conf/env.sh
      make feature
    displayName: 'Feature tests'

  - script: |
      set -e
      kubectl delete ns $(jobuuid)
    displayName: 'Cleanup tests'
    condition: failed()

  - script: |
      set -e
      echo $(version) > $(Build.ArtifactStagingDirectory)/version.txt
    displayName: 'Create version artefact'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'operator'
    displayName: 'Publish artefacts'
